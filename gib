#!/usr/bin/env bash

readonly SCRIPT_NAME="$(basename $0)"
readonly SCRIPT_DIR=$(CDPATH= cd -- "$(dirname -- "$0")" && pwd)

source "${SCRIPT_DIR}/../shcommons/essentials.sh"
source "${SCRIPT_DIR}/../shcommons/extras.sh"
source "${SCRIPT_DIR}/../shcommons/log.sh"

readonly GITHUB_MAX_PER_PAGE=100
readonly GITLAB_MAX_PER_PAGE=100

usage()
{
    pusage "$SCRIPT_NAME [-h|--help] COMMAND [<args>]"
    echo 'List of commands:'
    echo '    clone            Bulk clone repositories'
    echo '    pull             Bulk pull'
    echo '    clone-or-pull    Bulk clone or pull if exists'
    echo 'Running this script require the jq(https://stedolan.github.io/jq/) to be installed in the system.'
    exit
}

clone_usage()
{
    pusage "$SCRIPT_NAME clone [-c|--conf <configuration file>] [-v|--verbose] [-h|--help]"
    exit
}

pull_usage()
{
    pusage "$SCRIPT_NAME pull [-c|--conf <configuration file>] [-v|--verbose] [-h|--help]"
    exit
}

clone_or_pull_usage()
{
    pusage "$SCRIPT_NAME clone-or-pull [-c|--conf <configuration file>] [-v|--verbose] [-h|--help]"
    exit
}

# Get username or organization name
get_name_from_url()
{
    name="$(basename $1)"
    echo "${name%.*}"
}

ppushd()
{
    pushd "${1}" &> /dev/null; rv="${?}"
    if [ "$rv" != 0 ]; then
        perrorl "${SCRIPT_NAME}:" "pushd ${1}:" "[$rv]:" "Failed to pushd"
        return "$rv"
    fi
}

mkpd()
{
    peval_noout "mkdir -p ${1}" "${SCRIPT_NAME}:" && ppushd "${1}"
}

pverbose()
{
    COLUMNS=$(tput cols) 
    printf "%s %*s\n" "${1}" $(($COLUMNS-${#1}-1)) "$PWD" >&1
}

git_clone()
{
    [ "$is_verbose" = true ] && pverbose "${1}"
    branch="${2:-${default_branch:-}}"
    peval_noout "git clone --recursive -q${branch:+ -b $branch} ${1} ${3:+$(readlink -nf ${3})}" "${SCRIPT_NAME}:" "${1}:"
}

git_pull()
{
    [ "$is_verbose" = true ] && pverbose "${1}"
    d="${3:+$(readlink -nf ${3})}"
    d="${d:-$(get_name_from_url ${1})}"
    ppushd "$d" &> /dev/null || return "$ENO_ENOENT"
    b="${2:-${default_branch:-master}}"
    peval_noout "git checkout -q $b" "${SCRIPT_NAME}:" "${1}:"; rv="${?}"
    [ "$rv" != 0 ] && return "$rv"
    peval_noout "git pull -q" "${SCRIPT_NAME}:"; rv="${?}"
    [ "$rv" != 0 ] && return "$rv"
    popd &> /dev/null
    return "$rv"
}

git_clone_or_pull()
{
    git_clone "${1}" "${2}" "${3}"; rv="${?}"
    if [ "$rv" != 0 ]; then
        orig_verbose="$is_verbose" && is_verbose=false
        git_pull "${1}" "${2}" "${3}"; rv="${?}"
        is_verbose="$orig_verbose"
    fi
    return "$rv"
}

get_repos_of_user_from_github()
{
    user_type=$(peval "curl -q -s 'https://api.github.com/users/${1}'" "${SCRIPT_NAME}:" | jq -r '.type' 2> /dev/null)
    case "$user_type" in
    User ) get_user_repos_from_github "${@}" ;;
    Organization ) get_repos_of_org_from_github "${@}" ;;
    * ) perrorl "${SCRIPT_NAME}:" "https://api.github.com/users/${1}:" "Unknown user type '$user_type'" ;;
    esac
}

get_user_repos_from_github()
{
    mkpd "${dir:-$1}" || continue
    pagination=; pageno=2
    while :; do
        repo_list=$(peval "curl -q -s${access_token:+ --header \"Authorization: token $access_token\"} 'https://api.github.com/users/${1}/repos${pagination}'" "${SCRIPT_NAME}:" | jq -r '.[] .ssh_url' 2> /dev/null)
        is_empty "$repo_list" && break
        for repo in $repo_list; do
            eval "${2} $repo $branch"
        done
        pagination="?per_page=${GITHUB_MAX_PER_PAGE}&page=${pageno}"; let pageno++
    done
    popd &> /dev/null
}

get_repos_of_user_from_gitlab()
{
    mkpd "${dir:-$1}" || continue
    pagination=; pageno=2
    while :; do
        repo_list=$(peval "curl -q -s${access_token:+ --header \"PRIVATE-TOKEN: $access_token\"} 'https://gitlab.com/api/v4/users/${1}/projects${pagination}'" "${SCRIPT_NAME}:" | jq -r '.[] .ssh_url_to_repo' 2> /dev/null)
        is_empty "$repo_list" && break
        for repo in $repo_list; do
            eval "${2} $repo $branch"
        done
        pagination="?per_page=${GITLAB_MAX_PER_PAGE}&page=${pageno}"; let pageno++
    done
    popd &> /dev/null
}

get_repos_of_org_from_github()
{
    mkpd "${dir:-$1}" || continue
    pagination=; pageno=2
    while :; do
        repo_list=$(peval "curl -q -s${access_token:+ --header \"Authorization: token $access_token\"} 'https://api.github.com/orgs/${1}/repos${pagination}'" "${SCRIPT_NAME}:" | jq -r '.[] .ssh_url' 2> /dev/null)
        is_empty "$repo_list" && break
        for repo in $repo_list; do
            eval "${2} $repo $branch"
        done
        pagination="?per_page=${GITHUB_MAX_PER_PAGE}&page=${pageno}"; let pageno++
    done
    popd &> /dev/null
}

get_repos_of_org_from_gitlab()
{
    mkpd "${dir:-$1}" || continue
    pagination=; pageno=2
    while :; do
        repo_list=$(peval "curl -q -s${access_token:+ --header \"PRIVATE-TOKEN: $access_token\"} 'https://gitlab.com/api/v4/groups/${1}/projects${pagination}'" "${SCRIPT_NAME}:" | jq -r '.[] .ssh_url_to_repo' 2> /dev/null)
        is_empty "$repo_list" && break
        for repo in $repo_list; do
            eval "${2} $repo $branch"
        done
        pagination="?per_page=${GITLAB_MAX_PER_PAGE}&page=${pageno}"; let pageno++
    done
    popd &> /dev/null
}

get_repos_of_starred_from_github()
{
    mkpd "${dir:-$1}" || continue
    pagination=; pageno=2
    while :; do
        repo_list=$(peval "curl -q -s${access_token:+ --header \"Authorization: token $access_token\"} 'https://api.github.com/users/${1}/starred${pagination}'" "${SCRIPT_NAME}:" | jq -r '.[] .ssh_url' 2> /dev/null)
        is_empty "$repo_list" && break
        for repo in $repo_list; do
            eval "${2} $repo $branch"
        done
        pagination="?per_page=${GITHUB_MAX_PER_PAGE}&page=${pageno}"; let pageno++
    done
    popd &> /dev/null
}

get_repos_of_watched_from_github()
{
    mkpd "${dir:-$1}" || continue
    pagination=; pageno=2
    while :; do
        repo_list=$(peval "curl -q -s${access_token:+ --header \"Authorization: token $access_token\"} 'https://api.github.com/users/${1}/subscriptions${pagination}'" "${SCRIPT_NAME}:" | jq -r '.[] .ssh_url' 2> /dev/null)
        is_empty "$repo_list" && break
        for repo in $repo_list; do
            eval "${2} $repo $branch"
        done
        pagination="?per_page=${GITHUB_MAX_PER_PAGE}&page=${pageno}"; let pageno++
    done
    popd &> /dev/null
}

get_repos_from_following_peoples_in_github()
{
    mkpd "${dir:-$1}" || continue
    pagination=; pageno=2
    while :; do
        people_list=$(peval "curl -q -s${access_token:+ --header \"Authorization: token $access_token\"} 'https://api.github.com/users/${1}/following${pagination}'" "${SCRIPT_NAME}:" | jq -r '.[] .login' 2> /dev/null)
        is_empty "$people_list" && break
        for people in $people_list; do
            mkpd "$people" || continue
            get_user_repos_from_github "$people" "${2}"
        done
        pagination="?per_page=${GITHUB_MAX_PER_PAGE}&page=${pageno}"; let pageno++
    done
    popd &> /dev/null
}

skeleton()
{
    opts="$(getopt -o c:vh --long conf:,verbose,help -n $SCRIPT_NAME -- ${@})"
    if [ "${?}" != 0 ]; then
        perrorl "${SCRIPT_NAME}:" 'Failed to parsing options'
        "$usagefn"
    fi
    eval set -- "$opts"
    config_files=()
    while true; do
        case "${1}" in
        -c | --conf ) config_files+=( "${2}" ); shift 2 ;;
        -v | --verbose ) is_verbose=true; shift ;;
        -h | --help ) "$usagefn" ;;
        -- ) shift; break ;;
        * ) die "$ENO_ERROR" "${SCRIPT_NAME}:" 'Internal error' ;;
        esac
    done
    [ "${#config_files[@]}" = 0 ] && "$usagefn"
    if [ "$is_verbose" = true ]; then
        spin 0.5 &
        spin_pid="$!"
    fi
    for c in "${config_files[@]}"; do
        while read line; do
            for i in ${line[@]}; do
                [ "${i:0:1}" = '#' ] && break   # Skip comment
                eval "$i"
            done
            if is_set "$base_dir"; then
                popd &> /dev/null
                base_dir="${base_dir:+$(readlink -nf $base_dir)}"
                mkpd "${base_dir:-$PWD}" || continue
                unset base_dir
            fi
            dir="${dir:+$(readlink -nf $dir)}"
            if is_set "$repo_url"; then
                "$gitfn" "$repo_url" "$branch" "$dir"
            elif is_set "$github_user"; then
                get_repos_of_user_from_github "$github_user" "$gitfn"
            elif is_set "$gitlab_user"; then
                get_repos_of_user_from_gitlab "$gitlab_user" "$gitfn"
            elif is_set "$github_org"; then
                get_repos_of_org_from_github "$github_org" "$gitfn"
            elif is_set "$gitlab_group"; then
                get_repos_of_org_from_gitlab "$gitlab_group" "$gitfn"
            elif is_set "$github_starred"; then
                get_repos_of_starred_from_github "$github_starred" "$gitfn"
            elif is_set "$github_watched"; then
                get_repos_of_watched_from_github "$github_watched" "$gitfn"
            elif is_set "$github_all_following"; then
                get_repos_from_following_peoples_in_github "$github_all_following" "$gitfn"
            fi
            unset repo_url github_user gitlab_user github_org gitlab_group github_starred github_watched github_all_following dir branch access_token
        done < "$c"
        unset base_dir default_branch default_access_token
        popd &> /dev/null
    done
    if [ "$is_verbose" = true ]; then
        kill -9 "$spin_pid" &> /dev/null
    fi
}

clone()
{
    usagefn='clone_usage'
    gitfn='git_clone'
    skeleton "${@}"
}

pull()
{
    usagefn='pull_usage'
    gitfn='git_pull'
    skeleton "${@}"
}

clone_or_pull()
{
    usagefn='clone_or_pull_usage'
    gitfn='git_clone_or_pull'
    skeleton "${@}"
}

main()
{
    # Interrupted script by SIGHUP SIGINT SIGQUIT SIGTERM
    trap 'is_set "$spin_pid" && kill -9 "$spin_pid" &> /dev/null && perrorl "Interrupted by signal" >&2; exit' 1 2 3 15
    cmd="${1}"; shift
    case "$cmd" in
    -h | --help ) usage ;;
    clone ) clone "${@}" ;;
    pull ) pull "${@}" ;;
    clone-or-pull ) clone_or_pull "${@}" ;;
    * ) usage ;;
    esac
}

main "${@}"
